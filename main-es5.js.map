{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///src/services/city.service.ts","webpack:///src/services/timeseries.service.ts","webpack:///src/store/actions/city.actions.ts","webpack:///src/store/actions/timeseries.actions.ts","webpack:///src/store/actions/ui.actions.ts","webpack:///src/store/effects/city.effects.ts","webpack:///src/store/effects/timeseries.effects.ts","webpack:///src/store/effects/ui.effects.ts","webpack:///src/store/index.ts","webpack:///src/store/reducers/city.reducers.ts","webpack:///src/store/reducers/timeseries.reducers.ts","webpack:///src/store/states/city.state.ts","webpack:///src/store/states/timeseries.state.ts","webpack:///src/store/storage.module.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","loadChildren","m","CitiesModule","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","instrument","maxAge","logOnly","production","declarations","providers","bootstrap","environment","apiUrl","bootstrapModule","err","console","error","CityService","obs$","pipe","geojson","features","feature","codigo_ibge","properties","nome","name","geometria","geometry","coordinates","providedIn","TimeSeriesService","city","timeSeries","ibge","date","dates","Object","length","acc","curr","GetCities","GetCitiesSuccess","GetCitiesFailure","SelectCity","DeselectCity","ChangeMode","CityActionTypes","GetTimeSeriesByCity","GetTimeSeriesByCitySuccess","GetTimeSeriesByCityFailure","ShowMessage","CitiesEffects","actions","cityService","timeSeriesService","_","getCities","cities","timeseries","showMessageOnFailures$","action","message","TimeSeriesEffects","GetTimeSeries","getTimeSeriesByCity","UIEffects","snackbar","showMessage$","log","open","duration","dispatch","reducers","reducer","state","loading","selectedFacilityId","mapMode","NONE","setAll","selectedCityId","SELECT_CITY","mode","addAll","MapModeEnum","cityAdapter","selectId","instance","initialCityState","getInitialState","timeSeriesAdapter","initialTimeSeriesState","StorageModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: \"**\",\n     loadChildren: () =>\n    import('src/modules/cities/cities.module').then(m => m.CitiesModule) \n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'covid19brasilmap';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StorageModule } from 'src/store/storage.module';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    EffectsModule.forRoot([]),\n    StorageModule,\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"http://localhost:4000/api/v1\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, of } from \"rxjs\";\n\nimport { environment } from \"../environments/environment\";\nimport municipiosJson from \"../assets/data/geojs-35-mun.json\";\nimport { switchMap, map, toArray } from 'rxjs/operators';\nimport { City } from 'src/models/City';\n\n@Injectable({ providedIn: \"root\" })\nexport class CityService {\n  constructor() {}\n\n  public getCities(): Observable<any> {\n    const obs$ =  of(municipiosJson)\n    .pipe(\n      switchMap(geojson => geojson.features),\n      map((feature : any) => <City>({\n        codigo_ibge: feature.properties.id,\n        nome: feature.properties.name,\n        geometria: feature.geometry.coordinates\n      })),\n      toArray()\n    )\n    return obs$;\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, of, from } from \"rxjs\";\n\nimport { environment } from \"../environments/environment\";\nimport timeseriesJson from \"../assets/data/timeseries.json\";\nimport { switchMap, map, toArray, filter, reduce } from \"rxjs/operators\";\nimport { City } from \"src/models/City\";\n\n@Injectable({ providedIn: \"root\" })\nexport class TimeSeriesService {\n  constructor() {}\n\n  public getTimeSeriesByCity(city: City): Observable<any> {\n    let obs$ = of(timeseriesJson);\n    /*.pipe(\n      switchMap(geojson => geojson.features),\n      map((feature : any) => <City>({\n        codigo_ibge: feature.properties.id,\n        nome: feature.properties.name,\n        geometria: feature.geometry.coordinates\n      })),\n      toArray()\n    )*/\n\n    obs$ = of();\n    return obs$;\n  }\n\n  public getLatestData(): Observable<any> {\n    let obs$ = from(timeseriesJson)\n      .pipe(\n        filter(\n          (timeSeries: any) => timeSeries.ibge != null && timeSeries.ibge != 0\n        ),\n        map(timeSeries => ({\n          ibge: timeSeries.ibge,\n          date:\n            timeSeries.dates[\n              Object.keys(timeSeries.dates)[\n                Object.keys(timeSeries.dates).length - 1\n              ]\n            ]\n        })),\n        reduce((acc: any, curr: any) => ({ ...acc, [curr.ibge]: {...curr.date} }))\n      )\n    return obs$;\n  }\n}\n","import { createAction, props } from \"@ngrx/store\";\nimport { City } from \"../../models/City\";\nimport { MapModeEnum } from '../states/city.state';\n\nexport const GetCities = createAction(\"[CITY] GetCities\");\n\nexport const GetCitiesSuccess = createAction(\n  \"[CITY] GetCities Success\",\n  props<{ cities: City[] }>()\n);\n\nexport const GetCitiesFailure = createAction(\n  \"[CITY] GetCities Failure\",\n  props<{ err: any }>()\n);\n\nexport const SelectCity = createAction(\n  \"[CITY] Select City\",\n  props<{ city: City }>()\n);\n\nexport const DeselectCity = createAction(\n  \"[CITY] Deselect City\"\n);\n\nexport const ChangeMode = createAction(\n  \"[CITY] Change City Map Mode\",\n  props<{ mode: MapModeEnum }>()\n);\n\nexport const CityActionTypes = {\n  GetCities,\n  GetCitiesSuccess,\n  GetCitiesFailure,\n\n  DeselectCity,\n  SelectCity\n};\n","import { createAction, props } from \"@ngrx/store\";\nimport { City } from \"../../models/City\";\nimport { TimeSeries } from \"src/models/TimeSeries\";\n\nexport const GetTimeSeriesByCity = createAction(\n  \"[TIMESERIES] GetTimeseriesByCity\",\n  props<{ city: City }>()\n);\n\nexport const GetTimeSeriesByCitySuccess = createAction(\n  \"[TIMESERIES] GetTimeseriesByCity Success\",\n  props<{ timeseries: TimeSeries[] }>()\n);\n\nexport const GetTimeSeriesByCityFailure = createAction(\n  \"[TIMESERIES] GetTimeseriesByCity Failure\",\n  props<{ err: any }>()\n);\n\nexport const CityActionTypes = {\n  GetTimeSeriesByCity,\n  GetTimeSeriesByCitySuccess,\n  GetTimeSeriesByCityFailure\n};\n","import { createAction, props } from \"@ngrx/store\";\n\nexport const ShowMessage = createAction(\n  \"[UI] Show Message\",\n  props<{message: string}>()\n);\n","import { Injectable } from \"@angular/core\";\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\nimport {\n  map,\n  switchMap,\n  catchError,\n  tap,\n  concatMapTo,\n  mergeMap,\n  filter,\n  pairwise\n} from \"rxjs/operators\";\n\nimport { CityService } from \"../../services/city.service\";\nimport { TimeSeriesService } from \"../../services/timeseries.service\";\n\nimport { Observable, of, merge, combineLatest } from \"rxjs\";\nimport {\n  GetCities,\n  GetCitiesSuccess,\n  GetCitiesFailure,\n  SelectCity,\n  ChangeMode,\n  DeselectCity\n} from \"../actions/city.actions\";\nimport { ShowMessage } from \"../actions/ui.actions\";\nimport { City } from \"../../models/City\";\nimport { MapModeEnum } from '../states/city.state';\n\n@Injectable()\nexport class CitiesEffects {\n  constructor(\n    private actions: Actions,\n    private cityService: CityService,\n    private timeSeriesService: TimeSeriesService\n  ) {}\n\n  @Effect()\n  GetCities: Observable<any> = this.actions.pipe(\n    ofType(GetCities),\n    switchMap(_ => {\n      return merge(\n        this.cityService.getCities(),\n        //this.timeSeriesService.getLatestData()\n      ).pipe(map((cities,timeseries) => {\n        //console.log(\"bla\", timeseries);\n          return GetCitiesSuccess({ cities });\n        }),\n        catchError(err => {\n          return of(GetCitiesFailure({ err }));\n        })\n      );\n    })\n  );\n  \n  @Effect()\n  showMessageOnFailures$: Observable<any> = this.actions.pipe(\n    ofType(\n      GetCitiesFailure\n    ),\n    map(action => action.err),\n    switchMap(err =>\n      of(ShowMessage({ message: err.error.message || err.message }))\n    )\n  );\n}\n","import { Injectable } from \"@angular/core\";\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\nimport {\n  map,\n  switchMap,\n  catchError,\n  tap,\n  concatMapTo,\n  mergeMap,\n  filter,\n  pairwise\n} from \"rxjs/operators\";\n\nimport { TimeSeriesService } from \"../../services/timeseries.service\";\nimport { Observable, of, merge } from \"rxjs\";\nimport {\n  GetTimeSeriesByCity,\n  GetTimeSeriesByCitySuccess,\n  GetTimeSeriesByCityFailure,\n} from \"../actions/timeseries.actions\";\nimport { ShowMessage } from \"../actions/ui.actions\";\nimport { City } from \"../../models/City\";\nimport { TimeSeries } from 'src/models/TimeSeries';\n\n@Injectable()\nexport class TimeSeriesEffects {\n  constructor(\n    private actions: Actions,\n    private timeSeriesService: TimeSeriesService\n  ) {}\n\n  @Effect()\n  GetTimeSeries: Observable<any> = this.actions.pipe(\n    ofType(GetTimeSeriesByCity),\n    switchMap(action => {\n      return this.timeSeriesService.getTimeSeriesByCity(action.city).pipe(\n        map(timeseries => {\n          return GetTimeSeriesByCitySuccess({ timeseries });\n        }),\n        catchError(err => {\n          return of(GetTimeSeriesByCityFailure({ err }));\n        })\n      );\n    })\n  );\n  \n  @Effect()\n  showMessageOnFailures$: Observable<any> = this.actions.pipe(\n    ofType(\n      GetTimeSeriesByCityFailure\n    ),\n    map(action => action.err),\n    switchMap(err =>\n      of(ShowMessage({ message: err.error.message || err.message }))\n    )\n  );\n}\n","import { Actions, Effect, ofType } from \"@ngrx/effects\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { Observable } from \"rxjs\";\nimport { ShowMessage } from \"../actions/ui.actions\";\nimport { tap, map } from \"rxjs/operators\";\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class UIEffects {\n  constructor(private actions: Actions, private snackbar: MatSnackBar) {}\n\n  @Effect({ dispatch: false })\n  showMessage$: Observable<any> = this.actions.pipe(\n    ofType(ShowMessage),\n    map(action => action.message),\n    tap(message => {\n      console.log(message);\n      this.snackbar.open(message, \"Okay\", {\n        duration: 5000\n      });\n    })\n  );\n}\n","import { ActionReducerMap } from '@ngrx/store';\n\nimport * as city from \"./reducers/city.reducers\";\nimport * as timeseries from \"./reducers/timeseries.reducers\";\n\nimport { AppState } from './states/app.state';\n\nexport const reducers : ActionReducerMap<AppState> = {\n    city: city.reducer,\n    timeseries: timeseries.reducer\n};","import { createReducer, on } from \"@ngrx/store\";\n\nimport {\n  GetCities,\n  GetCitiesFailure,\n  GetCitiesSuccess,\n  SelectCity,\n  ChangeMode,\n  DeselectCity\n} from \"../actions/city.actions\";\nimport {\n  initialCityState,\n  cityAdapter,\n  MapModeEnum\n} from \"../states/city.state\";\n\nexport const reducer = createReducer(\n  initialCityState,\n  on(\n    GetCitiesFailure,\n    (state, action) => ({\n      ...state,\n      error: action.err,\n      loading: false\n    })\n  ),\n  on(GetCities, (state, action) => ({\n    ...state,\n    error: null,\n    loading: true,\n    selectedFacilityId: null,\n    mapMode: MapModeEnum.NONE\n  })),\n  on(GetCitiesSuccess, (state, action) => \n    cityAdapter.setAll(action.cities, {\n      ...state,\n      error: null,\n      loading: false\n    })\n  ),\n  on(SelectCity, (state, action) => ({\n    ...state,\n    selectedCityId: action.city.codigo_ibge,\n    mapMode: MapModeEnum.SELECT_CITY\n  })),\n  on(DeselectCity, (state, action) => ({\n    ...state,\n    selectedCityId: null\n  })),\n  on(ChangeMode, (state, action) => ({ ...state, mapMode: action.mode }))\n);\n","import { createReducer, on } from \"@ngrx/store\";\n\nimport {\n  GetTimeSeriesByCity,\n  GetTimeSeriesByCityFailure,\n  GetTimeSeriesByCitySuccess,\n} from \"../actions/timeseries.actions\";\nimport {\n  initialTimeSeriesState,\n  timeSeriesAdapter,\n} from \"../states/timeseries.state\";\n\nexport const reducer = createReducer(\n  initialTimeSeriesState,\n  on(\n    GetTimeSeriesByCityFailure,\n    (state, action) => ({\n      ...state,\n      error: action.err,\n      loading: false\n    })\n  ),\n  on(GetTimeSeriesByCity, (state, action) => ({\n    ...state,\n    error: null,\n    loading: true\n  })),\n  on(GetTimeSeriesByCitySuccess, (state, action) => \n    timeSeriesAdapter.addAll(action.timeseries, {\n      ...state,\n      error: null,\n      loading: false\n    })\n  )\n);\n","import { City } from \"../../models/City\";\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nexport enum MapModeEnum {\n  NONE = \"NONE\",\n  SELECT_CITY = \"SELECT_CITY\",\n};\n\nexport interface CityState extends EntityState<City> {\n  loading : boolean;\n  error : any;\n  selectedCityId : number;\n  mapMode : MapModeEnum;\n}\n\nexport const cityAdapter: EntityAdapter<City> = createEntityAdapter<City>({\n  selectId: instance => instance.codigo_ibge\n});\n\nexport const initialCityState: CityState = cityAdapter.getInitialState({\n  loading: false,\n  error: null,\n  selectedCityId: null,\n  mapMode: MapModeEnum.NONE\n});\n","import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { TimeSeries } from 'src/models/TimeSeries';\n\nexport interface TimeSeriesState extends EntityState<TimeSeries> {\n  loading : boolean;\n  error : any;\n}\n\nexport const timeSeriesAdapter: EntityAdapter<TimeSeries> = createEntityAdapter<TimeSeries>({\n  selectId: instance => instance.date\n});\n\nexport const initialTimeSeriesState: TimeSeriesState = timeSeriesAdapter.getInitialState({\n  loading: false,\n  error: null\n});\n","import { NgModule } from \"@angular/core\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\n\nimport { reducers } from \".\";\nimport { environment } from \"src/environments/environment\";\n\nimport { UIEffects } from \"./effects/ui.effects\";\nimport { CitiesEffects } from \"./effects/city.effects\";\nimport { TimeSeriesEffects } from './effects/timeseries.effects';\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot(reducers, {}),\n    EffectsModule.forRoot([\n      CitiesEffects,\n      TimeSeriesEffects,\n      UIEffects\n    ]),\n    environment.production ? [] : StoreDevtoolsModule.instrument()\n  ],\n  exports: [StoreModule]\n})\nexport class StorageModule {}\n"]}