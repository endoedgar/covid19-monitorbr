{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts","./src/services/city.service.ts","./src/services/timeseries.service.ts","./src/store/actions/city.actions.ts","./src/store/actions/timeseries.actions.ts","./src/store/actions/ui.actions.ts","./src/store/effects/city.effects.ts","./src/store/effects/timeseries.effects.ts","./src/store/effects/ui.effects.ts","./src/store/index.ts","./src/store/reducers/city.reducers.ts","./src/store/reducers/timeseries.reducers.ts","./src/store/states/city.state.ts","./src/store/states/timeseries.state.ts","./src/store/storage.module.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: \"**\",\n     loadChildren: () =>\n    import('src/modules/cities/cities.module').then(m => m.CitiesModule) \n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'covid19brasilmap';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StorageModule } from 'src/store/storage.module';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    EffectsModule.forRoot([]),\n    StorageModule,\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"http://localhost:4000/api/v1\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, of } from \"rxjs\";\n\nimport { environment } from \"../environments/environment\";\nimport municipiosJson from \"../assets/data/geojs-35-mun.json\";\nimport { switchMap, map, toArray } from 'rxjs/operators';\nimport { City } from 'src/models/City';\n\n@Injectable({ providedIn: \"root\" })\nexport class CityService {\n  constructor() {}\n\n  public getCities(): Observable<any> {\n    const obs$ =  of(municipiosJson)\n    .pipe(\n      switchMap(geojson => geojson.features),\n      map((feature : any) => <City>({\n        codigo_ibge: feature.properties.id,\n        nome: feature.properties.name,\n        geometria: feature.geometry.coordinates\n      })),\n      toArray()\n    )\n    return obs$;\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, of, from } from \"rxjs\";\n\nimport { environment } from \"../environments/environment\";\nimport timeseriesJson from \"../assets/data/timeseries.json\";\nimport { switchMap, map, toArray, filter, reduce } from \"rxjs/operators\";\nimport { City } from \"src/models/City\";\n\n@Injectable({ providedIn: \"root\" })\nexport class TimeSeriesService {\n  constructor() {}\n\n  public getTimeSeriesByCity(city: City): Observable<any> {\n    let obs$ = of(timeseriesJson);\n    /*.pipe(\n      switchMap(geojson => geojson.features),\n      map((feature : any) => <City>({\n        codigo_ibge: feature.properties.id,\n        nome: feature.properties.name,\n        geometria: feature.geometry.coordinates\n      })),\n      toArray()\n    )*/\n\n    obs$ = of();\n    return obs$;\n  }\n\n  public getLatestData(): Observable<any> {\n    let obs$ = from(timeseriesJson)\n      .pipe(\n        filter(\n          (timeSeries: any) => timeSeries.ibge != null && timeSeries.ibge != 0\n        ),\n        map(timeSeries => ({\n          ibge: timeSeries.ibge,\n          date:\n            timeSeries.dates[\n              Object.keys(timeSeries.dates)[\n                Object.keys(timeSeries.dates).length - 1\n              ]\n            ]\n        })),\n        reduce((acc: any, curr: any) => ({ ...acc, [curr.ibge]: {...curr.date} }))\n      )\n    return obs$;\n  }\n}\n","import { createAction, props } from \"@ngrx/store\";\nimport { City } from \"../../models/City\";\nimport { MapModeEnum } from '../states/city.state';\n\nexport const GetCities = createAction(\"[CITY] GetCities\");\n\nexport const GetCitiesSuccess = createAction(\n  \"[CITY] GetCities Success\",\n  props<{ cities: City[] }>()\n);\n\nexport const GetCitiesFailure = createAction(\n  \"[CITY] GetCities Failure\",\n  props<{ err: any }>()\n);\n\nexport const SelectCity = createAction(\n  \"[CITY] Select City\",\n  props<{ city: City }>()\n);\n\nexport const DeselectCity = createAction(\n  \"[CITY] Deselect City\"\n);\n\nexport const ChangeMode = createAction(\n  \"[CITY] Change City Map Mode\",\n  props<{ mode: MapModeEnum }>()\n);\n\nexport const CityActionTypes = {\n  GetCities,\n  GetCitiesSuccess,\n  GetCitiesFailure,\n\n  DeselectCity,\n  SelectCity\n};\n","import { createAction, props } from \"@ngrx/store\";\nimport { City } from \"../../models/City\";\nimport { TimeSeries } from \"src/models/TimeSeries\";\n\nexport const GetTimeSeriesByCity = createAction(\n  \"[TIMESERIES] GetTimeseriesByCity\",\n  props<{ city: City }>()\n);\n\nexport const GetTimeSeriesByCitySuccess = createAction(\n  \"[TIMESERIES] GetTimeseriesByCity Success\",\n  props<{ timeseries: TimeSeries[] }>()\n);\n\nexport const GetTimeSeriesByCityFailure = createAction(\n  \"[TIMESERIES] GetTimeseriesByCity Failure\",\n  props<{ err: any }>()\n);\n\nexport const CityActionTypes = {\n  GetTimeSeriesByCity,\n  GetTimeSeriesByCitySuccess,\n  GetTimeSeriesByCityFailure\n};\n","import { createAction, props } from \"@ngrx/store\";\n\nexport const ShowMessage = createAction(\n  \"[UI] Show Message\",\n  props<{message: string}>()\n);\n","import { Injectable } from \"@angular/core\";\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\nimport {\n  map,\n  switchMap,\n  catchError,\n  tap,\n  concatMapTo,\n  mergeMap,\n  filter,\n  pairwise\n} from \"rxjs/operators\";\n\nimport { CityService } from \"../../services/city.service\";\nimport { TimeSeriesService } from \"../../services/timeseries.service\";\n\nimport { Observable, of, merge, combineLatest } from \"rxjs\";\nimport {\n  GetCities,\n  GetCitiesSuccess,\n  GetCitiesFailure,\n  SelectCity,\n  ChangeMode,\n  DeselectCity\n} from \"../actions/city.actions\";\nimport { ShowMessage } from \"../actions/ui.actions\";\nimport { City } from \"../../models/City\";\nimport { MapModeEnum } from '../states/city.state';\n\n@Injectable()\nexport class CitiesEffects {\n  constructor(\n    private actions: Actions,\n    private cityService: CityService,\n    private timeSeriesService: TimeSeriesService\n  ) {}\n\n  @Effect()\n  GetCities: Observable<any> = this.actions.pipe(\n    ofType(GetCities),\n    switchMap(_ => {\n      return merge(\n        this.cityService.getCities(),\n        //this.timeSeriesService.getLatestData()\n      ).pipe(map((cities,timeseries) => {\n        //console.log(\"bla\", timeseries);\n          return GetCitiesSuccess({ cities });\n        }),\n        catchError(err => {\n          return of(GetCitiesFailure({ err }));\n        })\n      );\n    })\n  );\n  \n  @Effect()\n  showMessageOnFailures$: Observable<any> = this.actions.pipe(\n    ofType(\n      GetCitiesFailure\n    ),\n    map(action => action.err),\n    switchMap(err =>\n      of(ShowMessage({ message: err.error.message || err.message }))\n    )\n  );\n}\n","import { Injectable } from \"@angular/core\";\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\nimport {\n  map,\n  switchMap,\n  catchError,\n  tap,\n  concatMapTo,\n  mergeMap,\n  filter,\n  pairwise\n} from \"rxjs/operators\";\n\nimport { TimeSeriesService } from \"../../services/timeseries.service\";\nimport { Observable, of, merge } from \"rxjs\";\nimport {\n  GetTimeSeriesByCity,\n  GetTimeSeriesByCitySuccess,\n  GetTimeSeriesByCityFailure,\n} from \"../actions/timeseries.actions\";\nimport { ShowMessage } from \"../actions/ui.actions\";\nimport { City } from \"../../models/City\";\nimport { TimeSeries } from 'src/models/TimeSeries';\n\n@Injectable()\nexport class TimeSeriesEffects {\n  constructor(\n    private actions: Actions,\n    private timeSeriesService: TimeSeriesService\n  ) {}\n\n  @Effect()\n  GetTimeSeries: Observable<any> = this.actions.pipe(\n    ofType(GetTimeSeriesByCity),\n    switchMap(action => {\n      return this.timeSeriesService.getTimeSeriesByCity(action.city).pipe(\n        map(timeseries => {\n          return GetTimeSeriesByCitySuccess({ timeseries });\n        }),\n        catchError(err => {\n          return of(GetTimeSeriesByCityFailure({ err }));\n        })\n      );\n    })\n  );\n  \n  @Effect()\n  showMessageOnFailures$: Observable<any> = this.actions.pipe(\n    ofType(\n      GetTimeSeriesByCityFailure\n    ),\n    map(action => action.err),\n    switchMap(err =>\n      of(ShowMessage({ message: err.error.message || err.message }))\n    )\n  );\n}\n","import { Actions, Effect, ofType } from \"@ngrx/effects\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { Observable } from \"rxjs\";\nimport { ShowMessage } from \"../actions/ui.actions\";\nimport { tap, map } from \"rxjs/operators\";\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class UIEffects {\n  constructor(private actions: Actions, private snackbar: MatSnackBar) {}\n\n  @Effect({ dispatch: false })\n  showMessage$: Observable<any> = this.actions.pipe(\n    ofType(ShowMessage),\n    map(action => action.message),\n    tap(message => {\n      console.log(message);\n      this.snackbar.open(message, \"Okay\", {\n        duration: 5000\n      });\n    })\n  );\n}\n","import { ActionReducerMap } from '@ngrx/store';\n\nimport * as city from \"./reducers/city.reducers\";\nimport * as timeseries from \"./reducers/timeseries.reducers\";\n\nimport { AppState } from './states/app.state';\n\nexport const reducers : ActionReducerMap<AppState> = {\n    city: city.reducer,\n    timeseries: timeseries.reducer\n};","import { createReducer, on } from \"@ngrx/store\";\n\nimport {\n  GetCities,\n  GetCitiesFailure,\n  GetCitiesSuccess,\n  SelectCity,\n  ChangeMode,\n  DeselectCity\n} from \"../actions/city.actions\";\nimport {\n  initialCityState,\n  cityAdapter,\n  MapModeEnum\n} from \"../states/city.state\";\n\nexport const reducer = createReducer(\n  initialCityState,\n  on(\n    GetCitiesFailure,\n    (state, action) => ({\n      ...state,\n      error: action.err,\n      loading: false\n    })\n  ),\n  on(GetCities, (state, action) => ({\n    ...state,\n    error: null,\n    loading: true,\n    selectedFacilityId: null,\n    mapMode: MapModeEnum.NONE\n  })),\n  on(GetCitiesSuccess, (state, action) => \n    cityAdapter.setAll(action.cities, {\n      ...state,\n      error: null,\n      loading: false\n    })\n  ),\n  on(SelectCity, (state, action) => ({\n    ...state,\n    selectedCityId: action.city.codigo_ibge,\n    mapMode: MapModeEnum.SELECT_CITY\n  })),\n  on(DeselectCity, (state, action) => ({\n    ...state,\n    selectedCityId: null\n  })),\n  on(ChangeMode, (state, action) => ({ ...state, mapMode: action.mode }))\n);\n","import { createReducer, on } from \"@ngrx/store\";\n\nimport {\n  GetTimeSeriesByCity,\n  GetTimeSeriesByCityFailure,\n  GetTimeSeriesByCitySuccess,\n} from \"../actions/timeseries.actions\";\nimport {\n  initialTimeSeriesState,\n  timeSeriesAdapter,\n} from \"../states/timeseries.state\";\n\nexport const reducer = createReducer(\n  initialTimeSeriesState,\n  on(\n    GetTimeSeriesByCityFailure,\n    (state, action) => ({\n      ...state,\n      error: action.err,\n      loading: false\n    })\n  ),\n  on(GetTimeSeriesByCity, (state, action) => ({\n    ...state,\n    error: null,\n    loading: true\n  })),\n  on(GetTimeSeriesByCitySuccess, (state, action) => \n    timeSeriesAdapter.addAll(action.timeseries, {\n      ...state,\n      error: null,\n      loading: false\n    })\n  )\n);\n","import { City } from \"../../models/City\";\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nexport enum MapModeEnum {\n  NONE = \"NONE\",\n  SELECT_CITY = \"SELECT_CITY\",\n};\n\nexport interface CityState extends EntityState<City> {\n  loading : boolean;\n  error : any;\n  selectedCityId : number;\n  mapMode : MapModeEnum;\n}\n\nexport const cityAdapter: EntityAdapter<City> = createEntityAdapter<City>({\n  selectId: instance => instance.codigo_ibge\n});\n\nexport const initialCityState: CityState = cityAdapter.getInitialState({\n  loading: false,\n  error: null,\n  selectedCityId: null,\n  mapMode: MapModeEnum.NONE\n});\n","import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { TimeSeries } from 'src/models/TimeSeries';\n\nexport interface TimeSeriesState extends EntityState<TimeSeries> {\n  loading : boolean;\n  error : any;\n}\n\nexport const timeSeriesAdapter: EntityAdapter<TimeSeries> = createEntityAdapter<TimeSeries>({\n  selectId: instance => instance.date\n});\n\nexport const initialTimeSeriesState: TimeSeriesState = timeSeriesAdapter.getInitialState({\n  loading: false,\n  error: null\n});\n","import { NgModule } from \"@angular/core\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\n\nimport { reducers } from \".\";\nimport { environment } from \"src/environments/environment\";\n\nimport { UIEffects } from \"./effects/ui.effects\";\nimport { CitiesEffects } from \"./effects/city.effects\";\nimport { TimeSeriesEffects } from './effects/timeseries.effects';\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot(reducers, {}),\n    EffectsModule.forRoot([\n      CitiesEffects,\n      TimeSeriesEffects,\n      UIEffects\n    ]),\n    environment.production ? [] : StoreDevtoolsModule.instrument()\n  ],\n  exports: [StoreModule]\n})\nexport class StorageModule {}\n"],"sourceRoot":"webpack:///"}